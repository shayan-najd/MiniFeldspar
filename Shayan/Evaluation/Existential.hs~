{-# OPTIONS_GHC -Wall -fno-warn-orphans #-}
{-# LANGUAGE TypeFamilies #-}
module Evaluation.Existential where

import Expression.Existential
import Value.Existential as V
import qualified Environment.ADT as U
import Environment.Conversion ()
import Conversion 
import Evaluation
import Environment.Conversion ()
import Evaluation.GADT ()

instance Evl Exp where
  type Val Exp = V.Val
  type Env Exp = U.Env V.Val 
  evl (Exp e r t) vs = do r' <- cnv (r , vs)
                          v  <- evl e r'
                          return (Val v t)
 