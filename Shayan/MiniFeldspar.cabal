name:                MiniFeldspar
version:             0.1.0.0
synopsis:            A Conversion from Template Haskell to MiniFeldspar
homepage:            https://github.com/shayan-najd/MiniFeldspar/tree/master/Shayan
license:             GPL-3
license-file:        LICENSE
author:              Shayan Najd
maintainer:          sh dot najd att ed.ac.uk
category:            Language
build-type:          Simple
cabal-version:       >=1.8
library 
  ghc-options: -Wall -fno-warn-orphans
  extensions:
     NoMonomorphismRestriction,
     PolyKinds,
     DataKinds,
     ConstraintKinds,
     TypeOperators,
     TypeFamilies,
     GADTs,
     FlexibleInstances,
     FlexibleContexts,
     StandaloneDeriving,
     DeriveFoldable,
     DeriveFunctor,
     DeriveTraversable,
     DeriveDataTypeable,
     DeriveGeneric,
     NoUndecidableInstances,
     MonoLocalBinds,
     ScopedTypeVariables,
     MultiParamTypeClasses,
     ImplicitParams,
     TemplateHaskell,
     Rank2Types
  exposed-modules: 
     InferenceMonad,
     ChangeMonad,
     Inference,
     VanillaPrelude,
     Singleton,
     Normalization,
     TypeChecking,
     MyPrelude,
     Existential,
     Solver,
     Test,
     Conversion,
     ErrorMonad,
     Type.Herbrand,
     Type.Feldspar.GADT,
     Type.Feldspar.ADT,
     Control.Applicative.Recursion,
     TypeChecking.Feldspar,
     Conversion.Nat,
     Conversion.Existential,
     Conversion.Environment,
     Conversion.Variable,
     Conversion.Type.Feldspar,
     Conversion.Expression.Feldspar,
     Conversion.Expression.TemplateHaskell,
     Conversion.Expression.Feldspar.Unquoting,
     Conversion.Expression.Feldspar.TypeWithnessing,
     Conversion.Expression.Feldspar.Normalization,
     Conversion.Expression.Feldspar.Lifting,
     Conversion.Expression.Feldspar.TypeInference,
     Conversion.Expression.Feldspar.ScopeWithnessing,
     Conversion.Expression.Feldspar.NameResolution,
     Conversion.Expression.Feldspar.Evaluation.GADTHigherOrder,
     Conversion.Expression.Feldspar.Evaluation.GADTFirstOrder,
     Conversion.Expression.Feldspar.Evaluation.ADTUntypedNamed,
     Conversion.Expression.Feldspar.Evaluation.MiniWellScoped,
     Conversion.Expression.Feldspar.Evaluation.ADTUntypedDebruijn,
     Conversion.Expression.Feldspar.Evaluation.GADTUntypedDebruijn,
     Conversion.Expression.Feldspar.Evaluation.GADTTyped,
     Expression.Feldspar.GADTHigherOrder,
     Expression.Feldspar.GADTValue,
     Expression.Feldspar.ADTValue,
     Expression.Feldspar.GADTFirstOrder,
     Expression.Feldspar.ADTUntypedNamed,
     Expression.Feldspar.MiniWellScoped,
     Expression.Feldspar.ADTUntypedDebruijn,
     Expression.Feldspar.GADTUntypedDebruijn,
     Expression.Feldspar.GADTTyped,
     Nat.GADT,
     Nat.ADT,
     Variable.Typed,
     Variable.Plain,
     Variable.Scoped,
     Environment.Typed,
     Environment.Map,
     Environment.Plain,
     Environment.Scoped,
     Examples.TemplateHaskell,
     Examples.Feldspar.GADTHigherOrder,
     Examples.Feldspar.GADTFirstOrder,
     Examples.Feldspar.ADTUntypedNamed,
     Examples.Feldspar.MiniWellScoped,
     Examples.Feldspar.ADTUntypedDebruijn,
     Examples.Feldspar.GADTUntypedDebruijn,
     Examples.Feldspar.Conversion,
     Examples.Feldspar.GADTTyped,
     Examples.Feldspar.Prelude.MiniWellScoped,
     Normalization.Feldspar.GADTHigherOrder,
     Normalization.Feldspar.GADTTyped 
  build-depends:       
     base             == 4.7.*,
     mtl              == 2.1.*,
     array            == 0.5.*,
     template-haskell == 2.9.*