% \begin{abstract}
% 
% Domain Specific Languages (DSLs) are widely used.
% This paper introduces QDSL (Quoted DSL) 
% to consolidate a collection of concepts emerging as an approach
% to designing DSLs.
% The key concepts are
% 
% \begin{itemize}
% 
% \item Terms of the DSL are quoted, or are assembled using quotation
%       and antiquotation. While EDSLs steal the type system of the
%       embedding language and often closely resemble its syntax,
%       QDSLs steal both the type system and the syntax.
%       Quotation may be either traditional or type-based.
% 
% \item Normalisation guarantees types satisfy Gentzen's subformula property.
%       In particular, this allows one to write higher-order terms while
%       guaranteeing to generate first-order code, to allow nested intermediate
%       terms while generating code that operates on flat data, or to guarantee
%       fusion of iterations over collections in generated code.
% 
% \end{itemize}
% We contrast QDSL with the traditional EDSL (Embedded DSL) approach,
% and we offer three examples of the notion of QDSL.
% \begin{itemize}
% 
% \item We port Feldspar, and EDSL in Haskell, to a QDSL.
% 
% \item P-LINQ, an embedding of SQL in F# described by Cheney et al (2013).
% 
% \item Lightweight Modular Staging (LMS) in Scala, as used in Delite and other systems.
% 
% \end{itemize}
% \end{abstract}

% Fix: first sentence of abstract is dull
% Fix: add sentence to abstract about reusing an idea
%      four-fifths of a century old in a new context


