%% Draft outline

%% (0) Abstract
%% (1) Keywords
%% (2) Introduction
%%     (i) very general introduction to the problem and the solution without
%%          (a) terms not understandable by a third year CS student
%%          (b) references
%%     (ii) general technical introduction to the problem we are trying to solve
%%     (iii) why the problem is important (why the problem matters)
%%     (iv) general technical introduction to the solution we are providing
%%     (v) our contributions (why our solution matters)
%%     (vi) paper layout
%% (3) Background
%%     (i) background on embedding including
%%         (a) introducing MiniFeldspar's first-order language, vectors and the unique benefits of it (free fusion and guarantees)
%%         (b) introducing the essence of the Practical Theory's embedding technique of SQL including what subformula property is and why it matters
%% (4) Our proposal
%%     (i) vector processing examples in MiniFeldspar's first-order language
%%     (ii) vector processing examples in TH language
%%     (iii) describing benefits of our approach in details (e.g. syntax, absence of vectors, and reusing the host language normalizer)
%%     (iv) stressing that normalizer does more optimization than evaluation in the spirit of MiniFeldspar's shallow embedding
%% (5) First Attempt (naive solution)
%%    describing the conversion, normalization, and why subformula property fails
%% (6) Second Attempt (real solution)
%%    describing the conversion with the FO constraint and theorems that subformula property holds
%% (7) Performance
%%    (i) examples of free fusion (e.g. scalarProd from MiniFeldspar) and showing that we do as good
%%    (ii) the table and discussions around the table
%% (8) Related Work
%% (9) Future Work
%% (10) Conclusion
%% (11) Acknowledgements

%%  Notes of First Meeting With Phil at ICFP
%% -----------------------------------------
%% Examples:
%% * sums and for loops
%% * Syntax
%%   - Conditional and less than
%%      + Haskell Only
%%      + Mixing host and embedded code
%%   - Deep and Shallow Embedding
%%      + simulates functions and tuples but not sums and for loops
%%      + types get more complicated
%% * Normalisation
%%   - ?
%% * Sharing
%%   - Observable sharing
%%   - CSE
%%   - Explicit sharing
%%
%%
%% ---------------
%% Possible Approaches:
%% 1. Implementations of ICFP'13 SQL, Lava, and Feldspar
%% 2. Compare Feldspar (deep + shallow + CSE + Opt.) with QDSL
%%    - Introduction: Compare Feldspar implemented with QDSL to Feldspar implemented with deep and
%%                    shallow embedding achieve the same effect with significantly less effort.
%%                    QDSL approach is straightforward and reuses a normaliser and typechecker.
%%                    In comparison, deep and shallow embedding requires
%%                      + repeating standard boilerplate for map between deep and shallow represnations
%%                      + more complicated type structures
%%                      + more complicated error messages
%%                      + implementing a CSE phase
%%                      + implementing more opt. (cost of special purpose optimisation to cancel out inverse conversions)
%%                      + cost of CSE on exponentially larger programs at program generation time (not at runtime)
%%                          / check with observable sharing stuff, e.g.
%%                                 dup v = (v , v)
%%                                 dup v = let v' = lable unique v in (v' , v')
%%
%%                    Deep and shallow embedding approach reuses the type system, some syntax of the host language for EDSL.
%%                    QDSL approach reuses the type system, and all the host language syntax.
%%                    Deep and shallow embedding uses the host language evaluator to normalise all occurences of function and product types.
%%                    QDSL approach uses a reusable normaliser to normalise all occurences of function, product types.
%%                    Two-layers
%%
%% ---------------------------------------------------------------------------
%% QDSLs: Why it is nicer to be quoted nor


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{abstract}
We describe a technique, based on quotation and normalisation of
quoted terms, for embedding into a host-language a domain-specific
language that translates into a target language. The technique was
developed by Cheney, Lindley, and Wadler (2013), who applied it to
embed queries into F\# that translate into SQL. They conjectured that
the same technique applied in other situations, and here we test that
conjecture by applying the technique to the Feldspar system of
Axelsson and others (2010), which embeds signal processing programs
into Haskell that translate into C. We validate our technique by
re-implementing Feldspar using Template Haskell quasi-quotation, and
confirm that Feldspar and our technique generate identical target code on
a range of applications including image processing, FFT, and CRC.

Feldspar, as well as similar languages such as Nicola and Hydra,
benefits from a clever combination of deep and shallow embedding that
permits programs in the embedded language to look almost---but not
quite!---identical to programs in the host language. (For instance,
arithmetic and pairing is identical in embedded and host languages,
but comparison and conditionals are not.) In contrast, our technique
makes the syntax of the embedded language identical to that of the
host language. Apart from building a normaliser for quoted terms, our
technique is simpler to apply than existing techniques; and we argue
that a single normaliser can be built once and used to embed many
domain-specific languages into a given host language.
\end{abstract}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FROM THE INTRODUCTION

We summarise a standard way to engineer domain-specific languages by
combining deep and shallow embedding, and describe a new technique
which we call \emph{quoted domain specific languages}, comparing and
contrasting the two.  We abbreviate the former as EDSL,
and the latter as QDSL.

We propose QDSL, a new way to define domain-specific languages,
and contrast it with EDSL based on the traditional combination of
deep and shallow embedding used in systems such as Feldspar
\citep{feldspar} and Nicola \citep{nicola}.

It has become common to write embedded domain-specific
languages (EDSLs) using a combination of deep and shallow
embedding

Do you prefer to build a domain-specific language using shallow
embedding, deep embedding, or a combination of the two?
This paper offers a new way---quoted domain-specific languages.
For brevity, we write EDSL for embedded domain specific language
(usually with a combination of deep and shallow embedding), and
QDSL for quoted domain specific language.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FROM SECTION 4 (MINIFELDSPAR AS A QDSL)

Readers might reasonably expect another seven pages explaining the
comparable parts of the QDSL library.  But there is no comparable
part!  The combination of deep and shallow embedding in CDSL allows
code in the target language to appear almost, but not quite, identical
to code in the host language. In contrast, quotation trivially gives
us host and target (quoted) languages that are identical.

All that is required is to ensure that any standard prelude functions used
inside QDSL quotations are understood and translated by our QDSL
processor. In this case, the only such functions used are arithmetic
primitives, plus the |Maybe| type and the functions |return|, |(>>=)|,
and |maybe|. In particular, the QDSL processor needs to replace
invocations of these three functions by their definitions. The
normaliser described in the next section will then completely eliminate
all occurrences of the |Maybe| type from the target program.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FROM SECTION 5 (SUBFORMULA)

%% \begin{figure*}[h]
%% \[\uncolored
%% \begin{array}[t]{@{}llll@{}l@{}l@{}l@{}l@{}l@{}l@{}l@{}l@{}}
%% \ \\[-22pt]
%% (\txt{Non-Value Neutral Forms}) & Q & \mathbin{\ ::=\ } & \expapp{x}{U} & \ |\ \  & \expapp{Q}{U} & \ |\ \  & \expfst{z} & \ |\ \  &  \multicolumn{3}{@{}l@{}}{\expsnd{z}}
%% \\
%% (\txt{Value Normal Forms}) & T,U & \mathbin{\ ::=\ } & S & \ |\ \  & \multicolumn{7}{@{}l@{}}{\expabs{x}{A}{P}}
%% \\
%% (\txt{Non-Abstraction Value Normal Forms}) & R,S & \mathbin{\ ::=\ } & \expvar{x} & \ |\ \  & \expunt & \ |\ \ & \expprd{T}{U} & \ |\ \ & \explft{T}{B} & \ |\ \ & \exprgt{A}{U}
%% \\
%% (\txt{Non-Abstraction Normal Forms}) & J,K & \mathbin{\ ::=\ } & Q &\ |\ \ & S &\ |\ \ & \multicolumn{5}{@{}l@{}}{\expcas{z}{x}{J}{y}{K}}
%% \\
%%  & & \ \ \ \ | & \multicolumn{9}{l@{}}{\expshr{x}{Q}{K}}
%% \\
%% (\txt{Normal Forms}) & P & \mathbin{\ ::=\ } & K &\ |\ \ & \multicolumn{7}{@{}l@{}}{\expabs{x}{A}{P}}
%% \\
%% \end{array}
%% \]
%% \caption{Normal Forms}
%% \label{fig:nf}
%% \end{figure*}


\begin{figure*}[h]
\[\uncolored
\begin{array}[t]{@{}llll@{}}

\inference
{}
{\Phi_0\typone}
{\Phi_0(\typone)}

&

&
\inference
{\Phi_0(A) & \Phi_0(B)}
{\Phi_0\times}
{\Phi_0(\typprd{A}{B})}
&
\inference
{\Phi_0(A) & \Phi_0(B)}
{\Phi_0+}
{\Phi_0(\typsum{A}{B})}


\\~\\

\inference
{}
{\Phi_{n+1}\typone}
{\Phi_{n+1}(\typone)}
&
\inference
{\Phi_n(A) & \Phi_{n+1}(B)}
{\Phi_{n+1}\rightarrow}
{\Phi_{n+1}(\typarr{A}{B})}
&
\inference
{\Phi_0(A) & \Phi_0(B)}
{\Phi_{n+1}\times}
{\Phi_{n+1}(\typprd{A}{B})}
&
\inference
{\Phi_0(A) & \Phi_0(B)}
{\Phi_{n+1}+}
{\Phi_{n+1}(\typsum{A}{B})}


\end{array}
\]
\caption{$\Phi$ Restriction}
\label{fig:phi}
\end{figure*}

Restricting the types of free variables, and the type of terms results
in interesting normal forms.

For a normal form which is easily compilable to \emph{C}, the
restriction $\Phi$ is applied. The restriction $\Phi$ is defined in
Figure~\ref{fig:phi}.

Having $\Gamma \vdash M : B$, by restricting the type of every free
variable $\typing{x_i}{A_i} \in \Gamma$ such that $\Phi_2(A_i)$, and
by restricting the type of the term $M$ such that $\Phi_1(B)$, we have
the normal form defined in Figure~\ref{fig:rnf}. The terms of this
normal form are easily compilable to \emph{C}.  The notation
$\overline{M}$ is used to denote a non-empty sequence of terms $M_i$.

\begin{figure*}[h]
\[\uncolored
\begin{array}[t]{@{}llll@{}l@{}l@{}l@{}l@{}l@{}l@{}l@{}l@{}}
\ \\[-22pt]
(\txt{Non-Value Neutral Forms}) & Q & \mathbin{\ ::=\ } & \expapp{x}{\highlight{\overline{U}}} & \ |\ \ & \expfst{z} & \ |\ \  &  \multicolumn{3}{@{}l@{}}{\expsnd{z}}
\\
(\txt{Value Normal Forms}) & T,U & \mathbin{\ ::=\ } & S & \ |\ \  & \multicolumn{7}{@{}l@{}}{\expabs{x}{A}{P}}
\\
(\txt{Non-Abstraction Value Normal Forms}) & R,S & \mathbin{\ ::=\ } & \expvar{x} & \ |\ \  & \expunt & \ |\ \ & \expprd{\highlight{R}}{\highlight{S}} & \ |\ \ & \explft{\highlight{R}}{B} & \ |\ \ & \exprgt{A}{\highlight{S}}
\\
(\txt{Non-Abstraction Normal Forms}) & J,K & \mathbin{\ ::=\ } & Q &\ |\ \ & S &\ |\ \ & \multicolumn{5}{@{}l@{}}{\expcas{z}{x}{J}{y}{K}}
\\
 & & \ \ \ \ | & \multicolumn{9}{l@{}}{\expshr{x}{Q}{K,\ \cnd{x \in \fv{K}}}}
\\
(\txt{Normal Forms}) & P & \mathbin{\ ::=\ } & K &\ |\ \ & \multicolumn{7}{@{}l@{}}{\expabs{x}{A}{P}}
\\
\end{array}
\]
\caption{$\Phi-$Restricted Normal Forms}
\label{fig:rnf}
\end{figure*}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% FROM SECTION 4 (MINIFELDSPAR AS A QDSL)

Thus, the key to our implementation is a transformer that converts
the representation of a quoted term |Qt| into type |Dp|.
\begin{spec}
translate :: Qt (a -> b) -> Dp a -> Dp b
\end{spec}
Composing |translate| with |cdsl|, the translator from |Dp| to C,
yields |qdsl|, our translator from quotations to C.
\begin{spec}
qdsl = cdsl . translate
\end{spec}
The processor translate is responsible for the following:
\begin{itemize}
\item It checks that only permitted primitives (those that can
  be translated to |Dp| and C) appear. Permitted primitives include:
  \begin{itemize}
  \item |(==)| and |(<)|, treated as operations on integers.
  \item |(+)|, |(*)|, and other operations on float.
  \item |while|, with the type described below.
  \item |ary|, |aryLen|, |aryIx|, with the type described below.
  \end{itemize}
\item It expands identifiers concerned with the types |(,)|, |Maybe|
  and |Ary|.
  \begin{itemize}
  \item For |(,)|, identifiers |fst| and |snd|.
  \item For |Maybe|, identifiers |return|, |(>>=)|, and |maybe|,
    as defined below.
  \item For |Ary|, identifiers |aryLen| and |aryIx|,
    as defined below.
  \end{itemize}
\end{itemize}
We describe below how a general purpose tool could be defined
to perform similar operations for any QDSL.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%