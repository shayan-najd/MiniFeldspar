%% Draft outline

%% (0) Abstract
%% (1) Keywords
%% (2) Introduction
%%     (i) very general introduction to the problem and the solution without
%%          (a) terms not understandable by a third year CS student
%%          (b) references
%%     (ii) general technical introduction to the problem we are trying to solve
%%     (iii) why the problem is important (why the problem matters)
%%     (iv) general technical introduction to the solution we are providing
%%     (v) our contributions (why our solution matters)
%%     (vi) paper layout
%% (3) Background
%%     (i) background on embedding including
%%         (a) introducing MiniFeldspar's first-order language, vectors and the unique benefits of it (free fusion and guarantees)
%%         (b) introducing the essence of the Practical Theory's embedding technique of SQL including what subformula property is and why it matters
%% (4) Our proposal
%%     (i) vector processing examples in MiniFeldspar's first-order language
%%     (ii) vector processing examples in TH language
%%     (iii) describing benefits of our approach in details (e.g. syntax, absence of vectors, and reusing the host language normalizer)
%%     (iv) stressing that normalizer does more optimization than evaluation in the spirit of MiniFeldspar's shallow embedding
%% (5) First Attempt (naive solution)
%%    describing the conversion, normalization, and why subformula property fails
%% (6) Second Attempt (real solution)
%%    describing the conversion with the FO constraint and theorems that subformula property holds
%% (7) Performance
%%    (i) examples of free fusion (e.g. scalarProd from MiniFeldspar) and showing that we do as good
%%    (ii) the table and discussions around the table
%% (8) Related Work
%% (9) Future Work
%% (10) Conclusion
%% (11) Acknowledgements

%%  Notes of First Meeting With Phil at ICFP
%% -----------------------------------------
%% Examples:
%% * sums and for loops
%% * Syntax
%%   - Conditional and less than
%%      + Haskell Only
%%      + Mixing host and embedded code
%%   - Deep and Shallow Embedding
%%      + simulates functions and tuples but not sums and for loops
%%      + types get more complicated
%% * Normalisation
%%   - ?
%% * Sharing
%%   - Observable sharing
%%   - CSE
%%   - Explicit sharing
%%
%%
%% ---------------
%% Possible Approaches:
%% 1. Implementations of ICFP'13 SQL, Lava, and Feldspar
%% 2. Compare Feldspar (deep + shallow + CSE + Opt.) with QDSL
%%    - Introduction: Compare Feldspar implemented with QDSL to Feldspar implemented with deep and
%%                    shallow embedding achieve the same effect with significantly less effort.
%%                    QDSL approach is straightforward and reuses a normaliser and typechecker.
%%                    In comparison, deep and shallow embedding requires
%%                      + repeating standard boilerplate for map between deep and shallow represnations
%%                      + more complicated type structures
%%                      + more complicated error messages
%%                      + implementing a CSE phase
%%                      + implementing more opt. (cost of special purpose optimisation to cancel out inverse conversions)
%%                      + cost of CSE on exponentially larger programs at program generation time (not at runtime)
%%                          / check with observable sharing stuff, e.g.
%%                                 dup v = (v , v)
%%                                 dup v = let v' = lable unique v in (v' , v')
%%
%%                    Deep and shallow embedding approach reuses the type system, some syntax of the host language for EDSL.
%%                    QDSL approach reuses the type system, and all the host language syntax.
%%                    Deep and shallow embedding uses the host language evaluator to normalise all occurences of function and product types.
%%                    QDSL approach uses a reusable normaliser to normalise all occurences of function, product types.
%%                    Two-layers
%%
%% ---------------------------------------------------------------------------
%% QDSLs: Why it is nicer to be quoted nor


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We summarise a standard way to engineer domain-specific languages by
combining deep and shallow embedding, and describe a new technique
which we call \emph{quoted domain specific languages}, comparing and
contrasting the two.  We abbreviate the former as EDSL,
and the latter as QDSL.

We propose QDSL, a new way to define domain-specific languages,
and contrast it with EDSL based on the traditional combination of
deep and shallow embedding used in systems such as Feldspar
\citep{feldspar} and Nicola \citep{nicola}.

It has become common to write embedded domain-specific
languages (EDSLs) using a combination of deep and shallow
embedding

Do you prefer to build a domain-specific language using shallow
embedding, deep embedding, or a combination of the two?
This paper offers a new way---quoted domain-specific languages.
For brevity, we write EDSL for embedded domain specific language
(usually with a combination of deep and shallow embedding), and
QDSL for quoted domain specific language.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%